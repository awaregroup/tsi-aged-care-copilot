trigger:
  branches:
    include:
    - main
    - prod

parameters:
  - name: environmentName
    type: string
  - name: serviceConnectionName
    type: string

variables:
- group: ${{ lower(parameters.environmentName) }}-variable-group

stages:
- stage: 'Build'

  displayName: 'Build Projects'

  condition: always()

  variables:
  - name: memorypipelineFolder
    value: '$(Build.SourcesDirectory)/memorypipeline'
  - name: dotnetVersion
    value: '6.x'

  jobs:
  - job: 'Build'
    displayName: '1. Build MemoryPipeline'

    pool:
      vmImage: 'windows-latest'

    steps:
    #don't clean to cache the node_modules and potentially nuget packages
    - checkout: self
      clean: false 

    #set pipeline variables based on git hash and date
    - script: |
          set mydate=%date:~10,4%%date:~7,2%%date:~4,2%
          FOR /F "tokens=*" %%g IN ('git rev-parse --short HEAD') do (SET HASH=%%g)
          echo "##vso[task.setvariable variable=ShortCommitHash;]%HASH%"
          echo "##vso[task.setvariable variable=OutputPrefix;]%mydate%-%HASH%"
      workingDirectory: '$(Build.SourcesDirectory)'

    #install correct .net sdk version
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '$(dotnetVersion)'
        installationPath: $(Agent.ToolsDirectory)/dotnet
        performMultiLevelLookup: true
      displayName: '.NET: Install .NET $(dotnetVersion) SDK'

    #build project
    - task: DotNetCoreCLI@2
      displayName: '.NET: Build Backend Project'
      inputs:
        publishWebProjects: false
        command: 'custom'
        custom: 'publish'
        projects: '$(memorypipelineFolder)/CopilotChatMemoryPipeline.csproj'
        workingDirectory: '$(memorypipelineFolder)'
        arguments: '--no-build --configuration Release -r win-x64 --self-contained true --output "$(Build.ArtifactStagingDirectory)/$(OutputPrefix)-Backend"'

    - powershell: Get-ChildItem -Path '$(Build.ArtifactStagingDirectory)/'

    #public memorypipeline artifacts
    - task: PublishBuildArtifacts@1
      displayName: 'Publish: Backend Artifacts'
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/'
        artifactName: 'drop'


- stage: 'Deploy'
  displayName: 'Deploy Projects'
  condition: success()

  variables:
  - group: ${{ lower(parameters.environmentName) }}-variable-group

  jobs:
  - job: 'Deploy'
    displayName: '2. Deploy MemoryPipeline'

    pool:
      vmImage: 'windows-latest'

    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        targetPath: '$(Pipeline.Workspace)'

    - task: AzurePowerShell@5
      inputs:
        azureSubscription: ${{parameters.serviceConnectionName}}
        ScriptType: 'InlineScript'
        Inline: |
          $webapp = Get-AzResource -Tag @{"skmemorypipeline"="1"} -ResourceGroupName '$(variables.RESOURCE_GROUP_NAME)'
          Write-Host "##vso[task.setvariable variable=TargetResourceName;]$webapp.Name"
        preferredAzurePowerShellVersion: '3.1.0'

    - task: AzureRmWebAppDeployment@4
      inputs:
        ConnectionType: 'AzureRM'
        appType: 'webApp'
        WebAppName: '$(TargetResourceName)'
        packageForLinux: '$(Pipeline.Workspace)/**/*.zip'
        AppSettings: '-DEPLOY_FROM_PACKAGE 1'