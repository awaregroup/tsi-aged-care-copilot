trigger:
  branches:
    include:
    - main
    - prod

parameters:
  - name: environmentName
    type: string
  - name: serviceConnectionName
    type: string

variables:
- group: ${{ lower(parameters.environmentName) }}-variable-group

stages:
  - stage: 'Build'

    displayName: 'Build Projects'

    condition: always()

    variables:
    - name: webAppFolder
      value: '$(Build.SourcesDirectory)/webapp'
    - name: frontendFolder
      value: '$(Build.SourcesDirectory)/webapi'
    - name: backendFolder
      value: '$(Build.SourcesDirectory)/memorypipeline'
    - name: nodeJsVersion
      value: '20.x'
    - name: dotnetVersion
      value: '6.x'

    jobs:
    - job: 'Frontend'
      displayName: '1. Build Frontend'

      pool:
        vmImage: 'windows-latest'

      steps:
      #don't clean to cache the node_modules and potentially nuget packages
      - checkout: self
        clean: false 

      #install correct version of nodejs
      - task: NodeTool@0
        inputs:
          versionSpec: $(nodeJsVersion)
        displayName: 'Web: Install Node.js version $(nodeJsVersion)'

      #install yarn packages
      - script: |
          yarn --frozen-lockfile 
        workingDirectory: '$(webAppFolder)'
        displayName: 'Web: Install yarn dependencies'

      #build production build of web app
      - script: |
          yarn build --frozen-lockfile
        workingDirectory: '$(webAppFolder)'
        displayName: 'Web: Build web application'
        env:
          BUILD_PATH: '$(frontendFolder)/wwwroot'
          REACT_APP_BACKEND_URI: ''
          REACT_APP_SK_VERSION: '$(Build.SourceVersion)'
          REACT_APP_SK_BUILD_INFO: '$(Build.BuildNumber)'

      #install correct .net sdk version
      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          version: '$(dotnetVersion)'
          installationPath: $(Agent.ToolsDirectory)/dotnet
          performMultiLevelLookup: true
        displayName: '.NET: Install .NET $(dotnetVersion) SDK'

      #build project
      - task: DotNetCoreCLI@2
        displayName: '.NET: Build Frontend Project'
        inputs:
          command: 'publish'
          workingDirectory: '$(frontendFolder)'
          arguments: '--configuration Release -r win-x64 --self-contained true --output "$(Build.ArtifactStagingDirectory)/frontend_output"'

      - powershell: Get-ChildItem -Path '$(Build.ArtifactStagingDirectory)/frontend_output/'

      #public frontend artifacts
      - task: PublishBuildArtifacts@1
        displayName: 'Publish: Frontend Artifacts'
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)/frontend_output'
          artifactName: '$(Build.BuildId)-$(Build.SourceVersion)-ChatCopilot-Frontend'

  - stage: 'Deploy'
    displayName: 'Deploy Projects'
    condition: always()

    jobs:
    - job: 'Deploy'
        displayName: '2. Deploy Frontend'

        pool:
          vmImage: 'windows-latest'

        steps:
        - checkout: none

        - task: DownloadPipelineArtifact@2
          inputs:
            buildType: 'current'
            targetPath: '$(Pipeline.Workspace)'

        - task: AzurePowerShell@5
          inputs:
            ScriptType: 'InlineScript'
            Inline: |
              $webapp = Get-AzResource -Tag @{"skweb"="1"} -ResourceGroupName '$(variables.RESOURCE_GROUP_NAME)'
              Write-Host "##vso[task.setvariable variable=TargetResourceName;]$webapp.Name"
            preferredAzurePowerShellVersion: '3.1.0'

        - task: AzureRmWebAppDeployment@4
          inputs:
            ConnectionType: 'AzureRM'
            appType: 'webApp'
            WebAppName: '$(TargetResourceName)'
            packageForLinux: '$(Pipeline.Workspace)/**/*.zip'
            AppSettings: '-DEPLOY_FROM_PACKAGE 1'